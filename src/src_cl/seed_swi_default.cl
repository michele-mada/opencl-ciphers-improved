

#define BLOCK_SIZE 16u
#define EXKEY_SIZE_DWORDS 32

#define HOST_LITTLE_ENDIAN


__constant uchar S0[0x100] = {
    0xA9, 0x85, 0xD6, 0xD3, 0x54, 0x1D, 0xAC, 0x25,
    0x5D, 0x43, 0x18, 0x1E, 0x51, 0xFC, 0xCA, 0x63,
    0x28, 0x44, 0x20, 0x9D, 0xE0, 0xE2, 0xC8, 0x17,
    0xA5, 0x8F, 0x03, 0x7B, 0xBB, 0x13, 0xD2, 0xEE,
    0x70, 0x8C, 0x3F, 0xA8, 0x32, 0xDD, 0xF6, 0x74,
    0xEC, 0x95, 0x0B, 0x57, 0x5C, 0x5B, 0xBD, 0x01,
    0x24, 0x1C, 0x73, 0x98, 0x10, 0xCC, 0xF2, 0xD9,
    0x2C, 0xE7, 0x72, 0x83, 0x9B, 0xD1, 0x86, 0xC9,
    0x60, 0x50, 0xA3, 0xEB, 0x0D, 0xB6, 0x9E, 0x4F,
    0xB7, 0x5A, 0xC6, 0x78, 0xA6, 0x12, 0xAF, 0xD5,
    0x61, 0xC3, 0xB4, 0x41, 0x52, 0x7D, 0x8D, 0x08,
    0x1F, 0x99, 0x00, 0x19, 0x04, 0x53, 0xF7, 0xE1,
    0xFD, 0x76, 0x2F, 0x27, 0xB0, 0x8B, 0x0E, 0xAB,
    0xA2, 0x6E, 0x93, 0x4D, 0x69, 0x7C, 0x09, 0x0A,
    0xBF, 0xEF, 0xF3, 0xC5, 0x87, 0x14, 0xFE, 0x64,
    0xDE, 0x2E, 0x4B, 0x1A, 0x06, 0x21, 0x6B, 0x66,
    0x02, 0xF5, 0x92, 0x8A, 0x0C, 0xB3, 0x7E, 0xD0,
    0x7A, 0x47, 0x96, 0xE5, 0x26, 0x80, 0xAD, 0xDF,
    0xA1, 0x30, 0x37, 0xAE, 0x36, 0x15, 0x22, 0x38,
    0xF4, 0xA7, 0x45, 0x4C, 0x81, 0xE9, 0x84, 0x97,
    0x35, 0xCB, 0xCE, 0x3C, 0x71, 0x11, 0xC7, 0x89,
    0x75, 0xFB, 0xDA, 0xF8, 0x94, 0x59, 0x82, 0xC4,
    0xFF, 0x49, 0x39, 0x67, 0xC0, 0xCF, 0xD7, 0xB8,
    0x0F, 0x8E, 0x42, 0x23, 0x91, 0x6C, 0xDB, 0xA4,
    0x34, 0xF1, 0x48, 0xC2, 0x6F, 0x3D, 0x2D, 0x40,
    0xBE, 0x3E, 0xBC, 0xC1, 0xAA, 0xBA, 0x4E, 0x55,
    0x3B, 0xDC, 0x68, 0x7F, 0x9C, 0xD8, 0x4A, 0x56,
    0x77, 0xA0, 0xED, 0x46, 0xB5, 0x2B, 0x65, 0xFA,
    0xE3, 0xB9, 0xB1, 0x9F, 0x5E, 0xF9, 0xE6, 0xB2,
    0x31, 0xEA, 0x6D, 0x5F, 0xE4, 0xF0, 0xCD, 0x88,
    0x16, 0x3A, 0x58, 0xD4, 0x62, 0x29, 0x07, 0x33,
    0xE8, 0x1B, 0x05, 0x79, 0x90, 0x6A, 0x2A, 0x9A
};

__constant uchar S1[0x100] = {
    0x38, 0xE8, 0x2D, 0xA6, 0xCF, 0xDE, 0xB3, 0xB8,
    0xAF, 0x60, 0x55, 0xC7, 0x44, 0x6F, 0x6B, 0x5B,
    0xC3, 0x62, 0x33, 0xB5, 0x29, 0xA0, 0xE2, 0xA7,
    0xD3, 0x91, 0x11, 0x06, 0x1C, 0xBC, 0x36, 0x4B,
    0xEF, 0x88, 0x6C, 0xA8, 0x17, 0xC4, 0x16, 0xF4,
    0xC2, 0x45, 0xE1, 0xD6, 0x3F, 0x3D, 0x8E, 0x98,
    0x28, 0x4E, 0xF6, 0x3E, 0xA5, 0xF9, 0x0D, 0xDF,
    0xD8, 0x2B, 0x66, 0x7A, 0x27, 0x2F, 0xF1, 0x72,
    0x42, 0xD4, 0x41, 0xC0, 0x73, 0x67, 0xAC, 0x8B,
    0xF7, 0xAD, 0x80, 0x1F, 0xCA, 0x2C, 0xAA, 0x34,
    0xD2, 0x0B, 0xEE, 0xE9, 0x5D, 0x94, 0x18, 0xF8,
    0x57, 0xAE, 0x08, 0xC5, 0x13, 0xCD, 0x86, 0xB9,
    0xFF, 0x7D, 0xC1, 0x31, 0xF5, 0x8A, 0x6A, 0xB1,
    0xD1, 0x20, 0xD7, 0x02, 0x22, 0x04, 0x68, 0x71,
    0x07, 0xDB, 0x9D, 0x99, 0x61, 0xBE, 0xE6, 0x59,
    0xDD, 0x51, 0x90, 0xDC, 0x9A, 0xA3, 0xAB, 0xD0,
    0x81, 0x0F, 0x47, 0x1A, 0xE3, 0xEC, 0x8D, 0xBF,
    0x96, 0x7B, 0x5C, 0xA2, 0xA1, 0x63, 0x23, 0x4D,
    0xC8, 0x9E, 0x9C, 0x3A, 0x0C, 0x2E, 0xBA, 0x6E,
    0x9F, 0x5A, 0xF2, 0x92, 0xF3, 0x49, 0x78, 0xCC,
    0x15, 0xFB, 0x70, 0x75, 0x7F, 0x35, 0x10, 0x03,
    0x64, 0x6D, 0xC6, 0x74, 0xD5, 0xB4, 0xEA, 0x09,
    0x76, 0x19, 0xFE, 0x40, 0x12, 0xE0, 0xBD, 0x05,
    0xFA, 0x01, 0xF0, 0x2A, 0x5E, 0xA9, 0x56, 0x43,
    0x85, 0x14, 0x89, 0x9B, 0xB0, 0xE5, 0x48, 0x79,
    0x97, 0xFC, 0x1E, 0x82, 0x21, 0x8C, 0x1B, 0x5F,
    0x77, 0x54, 0xB2, 0x1D, 0x25, 0x4F, 0x00, 0x46,
    0xED, 0x58, 0x52, 0xEB, 0x7E, 0xDA, 0xC9, 0xFD,
    0x30, 0x95, 0x65, 0x3C, 0xB6, 0xE4, 0xBB, 0x7C,
    0x0E, 0x50, 0x39, 0x26, 0x32, 0x84, 0x69, 0x93,
    0x37, 0xE7, 0x24, 0xA4, 0xCB, 0x53, 0x0A, 0x87,
    0xD9, 0x4C, 0x83, 0x8F, 0xCE, 0x3B, 0x4A, 0xB7
};



#define REVERSE_ENDIANNESS(number)                   \
        ((number & 0x00000000000000FF) << (7*8)      \
            | (number & 0xFF00000000000000) >> (7*8) \
            | (number & 0x000000000000FF00) << (5*8) \
            | (number & 0x00FF000000000000) >> (5*8) \
            | (number & 0x0000000000FF0000) << (3*8) \
            | (number & 0x0000FF0000000000) >> (3*8) \
            | (number & 0x00000000FF000000) << (1*8) \
            | (number & 0x000000FF00000000) >> (1*8))

#ifdef HOST_LITTLE_ENDIAN
    #define FIX_ENDIANNESS(number) REVERSE_ENDIANNESS(number)
#else
    #define FIX_ENDIANNESS(number) number
#endif



#define m0 0xFC
#define m1 0xF3
#define m2 0xCF
#define m3 0x3F

uint G(uint X) {
    uchar X0 = (X >> 8*0) & 0xff;
    uchar X1 = (X >> 8*1) & 0xff;
    uchar X2 = (X >> 8*2) & 0xff;
    uchar X3 = (X >> 8*3) & 0xff;

    uint Z0 = (S0[X0] & m0) ^ (S1[X1] & m1) ^ (S0[X2] & m2) ^ (S1[X3] & m3);
    uint Z1 = (S0[X0] & m1) ^ (S1[X1] & m2) ^ (S0[X2] & m3) ^ (S1[X3] & m0);
    uint Z2 = (S0[X0] & m2) ^ (S1[X1] & m3) ^ (S0[X2] & m0) ^ (S1[X3] & m1);
    uint Z3 = (S0[X0] & m3) ^ (S1[X1] & m0) ^ (S0[X2] & m1) ^ (S1[X3] & m2);

    return (Z3 & 0xff) << 24 | (Z2 & 0xff) << 16 | (Z1 & 0xff) << 8 | (Z0 & 0xff);
}


ulong F(uint Ki0, uint Ki1, ulong R) {
    uint R0 = R >> 32;
    uint R1 = R & 0xffffffff;

    uint oR0 = G(G(G((R0 ^ Ki0) ^ (R1 ^ Ki1))
                 + (R0 ^ Ki0))
               + G((R0 ^ Ki0) ^ (R1 ^ Ki1)))
             + G(G((R0 ^ Ki0) ^ (R1 ^ Ki1))
                 + (R0 ^ Ki0));

    uint oR1 = G(G(G((R0 ^ Ki0) ^ (R1 ^ Ki1))
                 + (R0 ^ Ki0))
               + G((R0 ^ Ki0) ^ (R1 ^ Ki1)));

    return ((ulong)oR0 << 32) | oR1;
}


#define SEED_ROUND_AND_SWAP(block1, block2) \
{ \
    temp = (block1); \
    uint Ki0 = k[round_key_id++]; \
    uint Ki1 = k[round_key_id++]; \
    (block1) = (block2) ^ F(Ki0, Ki1, (block1)); \
    (block2) = temp; \
}


void encrypt(__private uchar state_in[BLOCK_SIZE],
             __private ulong* key,
             __private uchar state_out[BLOCK_SIZE]) {
    ulong *M = (ulong*) state_in;
    ulong *C = (ulong*) state_out;
    ulong L, R, temp;
    size_t round_key_id = 0;

    L = FIX_ENDIANNESS(M[0]); R=FIX_ENDIANNESS(M[1]);  // initialization

    SEED_ROUND_AND_SWAP(L, R);  // round 1
    SEED_ROUND_AND_SWAP(L, R);  // round 2
    SEED_ROUND_AND_SWAP(L, R);  // round 3
    SEED_ROUND_AND_SWAP(L, R);  // round 4
    SEED_ROUND_AND_SWAP(L, R);  // round 5
    SEED_ROUND_AND_SWAP(L, R);  // round 6
    SEED_ROUND_AND_SWAP(L, R);  // round 7
    SEED_ROUND_AND_SWAP(L, R);  // round 8
    SEED_ROUND_AND_SWAP(L, R);  // round 9
    SEED_ROUND_AND_SWAP(L, R);  // round 10
    SEED_ROUND_AND_SWAP(L, R);  // round 11
    SEED_ROUND_AND_SWAP(L, R);  // round 12
    SEED_ROUND_AND_SWAP(L, R);  // round 13
    SEED_ROUND_AND_SWAP(L, R);  // round 14
    SEED_ROUND_AND_SWAP(L, R);  // round 15

    L = L ^ F(k[round_key_id++], R);  // final round

    C[0] = FIX_ENDIANNESS(L);
    C[1] = FIX_ENDIANNESS(R);
}

#define ENCRYPT_INTERFACE(in, key, out) encrypt(in, (ulong*)key, out, num_rounds)
#define DECRYPT_INTERFACE(in, key, out) encrypt(in, (ulong*)key, out, num_rounds)


__attribute__((reqd_work_group_size(1, 1, 1)))
__kernel void seedCipherEnc(__global uchar* restrict in,
                            __global ulong* restrict keys,
                            __global uchar* restrict out,
                            unsigned int num_rounds,
                            unsigned int input_size) \
    ECB_MODE_BOILERPLATE(ENCRYPT_INTERFACE, in, out, (__global uchar* restrict)keys, BLOCK_SIZE, EXKEY_SIZE_DWORDS*4, input_size);

__attribute__((reqd_work_group_size(1, 1, 1)))
__kernel void seedCipherDec(__global uchar* restrict in,
                            __global ulong* restrict keys,
                            __global uchar* restrict out,
                            unsigned int num_rounds,
                            unsigned int input_size) \
    ECB_MODE_BOILERPLATE(DECRYPT_INTERFACE, in, out, (__global uchar* restrict)keys, BLOCK_SIZE, EXKEY_SIZE_DWORDS*4, input_size);



__attribute__((reqd_work_group_size(1, 1, 1)))
__kernel void seedCipherCtr(__global uchar* restrict in,
                            __global ulong* restrict keys,
                            __global uchar* restrict out,
                            __global uchar* restrict IV,
                            unsigned int num_rounds,
                            unsigned int input_size) \
    CTR_MODE_BOILERPLATE(ENCRYPT_INTERFACE, in, out, (__global uchar* restrict)keys, IV, BLOCK_SIZE, EXKEY_SIZE_DWORDS*4, input_size);


__attribute__((reqd_work_group_size(1, 1, 1)))
__kernel void seedCipherXtsEnc(__global uchar* restrict in,
                               __global ulong* restrict keys1,
                               __global ulong* restrict keys2,
                               __global uchar* restrict out,
                               __global uchar* restrict tweak_init,
                               unsigned int num_rounds,
                               unsigned int input_size) \
    XTS_MODE_BOILERPLATE(ENCRYPT_INTERFACE, ENCRYPT_INTERFACE, in, out, (__global uchar* restrict)keys1, (__global uchar* restrict)keys2, tweak_init, BLOCK_SIZE, EXKEY_SIZE_DWORDS*4, input_size);

__attribute__((reqd_work_group_size(1, 1, 1)))
__kernel void seedCipherXtsDec(__global uchar* restrict in,
                               __global ulong* restrict keys1,
                               __global ulong* restrict keys2,
                               __global uchar* restrict out,
                               __global uchar* restrict tweak_init,
                               unsigned int num_rounds,
                               unsigned int input_size) \
    XTS_MODE_BOILERPLATE(DECRYPT_INTERFACE, ENCRYPT_INTERFACE, in, out, (__global uchar* restrict)keys1, (__global uchar* restrict)keys2, tweak_init, BLOCK_SIZE, EXKEY_SIZE_DWORDS*4, input_size);
